//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, {
  AxiosError,
  AxiosInstance,
  AxiosRequestConfig,
  AxiosResponse,
  CancelToken,
} from "axios";

export interface IWeatherForecastClient {
  get(api_version: string | null | undefined): Promise<WeatherForecast[]>;
}

export class WeatherForecastClient implements IWeatherForecastClient {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl =
      baseUrl !== undefined && baseUrl !== null
        ? baseUrl
        : "ws://localhost:7045";
  }

  get(
    api_version: string | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<WeatherForecast[]> {
    let url_ = this.baseUrl + "/weatherforecast?";
    if (api_version !== undefined && api_version !== null)
      url_ += "api-version=" + encodeURIComponent("" + api_version) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGet(_response);
      });
  }

  protected processGet(response: AxiosResponse): Promise<WeatherForecast[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(WeatherForecast.fromJS(item));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<WeatherForecast[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<WeatherForecast[]>(null as any);
  }
}

export interface IChannelClient {
  getChannelMessages(channelId: string): Promise<ChannelMessageDto[]>;
  getChannel(id: string): Promise<ChannelDto>;
  deleteChannel(id: string): Promise<void>;
  updateChannel(id: string, channel: ChannelManipulationDto): Promise<void>;
  addChannel(channelForCreation: ChannelManipulationDto): Promise<ChannelDto>;
}

export class ChannelClient implements IChannelClient {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl =
      baseUrl !== undefined && baseUrl !== null
        ? baseUrl
        : "ws://localhost:7045";
  }

  getChannelMessages(
    channelId: string,
    cancelToken?: CancelToken | undefined
  ): Promise<ChannelMessageDto[]> {
    let url_ = this.baseUrl + "/api/v1/channels/channels/{channelId}/messages";
    if (channelId === undefined || channelId === null)
      throw new Error("The parameter 'channelId' must be defined.");
    url_ = url_.replace("{channelId}", encodeURIComponent("" + channelId));
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetChannelMessages(_response);
      });
  }

  protected processGetChannelMessages(
    response: AxiosResponse
  ): Promise<ChannelMessageDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(ChannelMessageDto.fromJS(item));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<ChannelMessageDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<ChannelMessageDto[]>(null as any);
  }

  getChannel(
    id: string,
    cancelToken?: CancelToken | undefined
  ): Promise<ChannelDto> {
    let url_ = this.baseUrl + "/api/v1/channels/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetChannel(_response);
      });
  }

  protected processGetChannel(response: AxiosResponse): Promise<ChannelDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ChannelDto.fromJS(resultData200);
      return Promise.resolve<ChannelDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<ChannelDto>(null as any);
  }

  deleteChannel(
    id: string,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/v1/channels/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "DELETE",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteChannel(_response);
      });
  }

  protected processDeleteChannel(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 204) {
      const _responseText = response.data;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(null as any);
  }

  updateChannel(
    id: string,
    channel: ChannelManipulationDto,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/v1/channels/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(channel);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: "PUT",
      url: url_,
      headers: {
        "Content-Type": "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdateChannel(_response);
      });
  }

  protected processUpdateChannel(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 204) {
      const _responseText = response.data;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(null as any);
  }

  addChannel(
    channelForCreation: ChannelManipulationDto,
    cancelToken?: CancelToken | undefined
  ): Promise<ChannelDto> {
    let url_ = this.baseUrl + "/api/v1/channels";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(channelForCreation);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processAddChannel(_response);
      });
  }

  protected processAddChannel(response: AxiosResponse): Promise<ChannelDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 201) {
      const _responseText = response.data;
      let result201: any = null;
      let resultData201 = _responseText;
      result201 = ChannelDto.fromJS(resultData201);
      return Promise.resolve<ChannelDto>(result201);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<ChannelDto>(null as any);
  }
}

export interface IMessageClient {
  saveMessage(message: MessageManipulationDto): Promise<ChannelMessageDto>;
  updateMessage(id: string, message: string | null | undefined): Promise<void>;
  getMessage(id: string): Promise<ChannelMessageDto>;
  deleteMessageById(id: string): Promise<void>;
  getMessagesFromChannel(id: string): Promise<ChannelMessageDto[]>;
}

export class MessageClient implements IMessageClient {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl =
      baseUrl !== undefined && baseUrl !== null
        ? baseUrl
        : "ws://localhost:7045";
  }

  saveMessage(
    message: MessageManipulationDto,
    cancelToken?: CancelToken | undefined
  ): Promise<ChannelMessageDto> {
    let url_ = this.baseUrl + "/api/v1/messages";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(message);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processSaveMessage(_response);
      });
  }

  protected processSaveMessage(
    response: AxiosResponse
  ): Promise<ChannelMessageDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 201) {
      const _responseText = response.data;
      let result201: any = null;
      let resultData201 = _responseText;
      result201 = ChannelMessageDto.fromJS(resultData201);
      return Promise.resolve<ChannelMessageDto>(result201);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<ChannelMessageDto>(null as any);
  }

  updateMessage(
    id: string,
    message: string | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/v1/messages/{id}?";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    if (message !== undefined && message !== null)
      url_ += "message=" + encodeURIComponent("" + message) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "PUT",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdateMessage(_response);
      });
  }

  protected processUpdateMessage(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 204) {
      const _responseText = response.data;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(null as any);
  }

  getMessage(
    id: string,
    cancelToken?: CancelToken | undefined
  ): Promise<ChannelMessageDto> {
    let url_ = this.baseUrl + "/api/v1/messages/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetMessage(_response);
      });
  }

  protected processGetMessage(
    response: AxiosResponse
  ): Promise<ChannelMessageDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ChannelMessageDto.fromJS(resultData200);
      return Promise.resolve<ChannelMessageDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<ChannelMessageDto>(null as any);
  }

  deleteMessageById(
    id: string,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/v1/messages/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "DELETE",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteMessageById(_response);
      });
  }

  protected processDeleteMessageById(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 204) {
      const _responseText = response.data;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(null as any);
  }

  getMessagesFromChannel(
    id: string,
    cancelToken?: CancelToken | undefined
  ): Promise<ChannelMessageDto[]> {
    let url_ = this.baseUrl + "/api/v1/messages/channel/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetMessagesFromChannel(_response);
      });
  }

  protected processGetMessagesFromChannel(
    response: AxiosResponse
  ): Promise<ChannelMessageDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(ChannelMessageDto.fromJS(item));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<ChannelMessageDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<ChannelMessageDto[]>(null as any);
  }
}

export interface IServerClient {
  getServers(): Promise<ServerDto[]>;
  addServer(serverForCreation: ServerManipulationDto): Promise<ServerDto>;
  getServersOfUser(): Promise<ServerDto[]>;
  getServerById(serverId: string): Promise<ServerDto>;
  getChannels(serverId: string): Promise<ChannelDto[]>;
  deleteServer(id: string): Promise<void>;
  updateServer(id: string, server: ServerManipulationDto): Promise<void>;
  joinServer(serverId: string): Promise<void>;
  leaveServer(serverId: string): Promise<void>;
}

export class ServerClient implements IServerClient {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl =
      baseUrl !== undefined && baseUrl !== null
        ? baseUrl
        : "ws://localhost:7045";
  }

  getServers(cancelToken?: CancelToken | undefined): Promise<ServerDto[]> {
    let url_ = this.baseUrl + "/api/v1/servers";
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetServers(_response);
      });
  }

  protected processGetServers(response: AxiosResponse): Promise<ServerDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(ServerDto.fromJS(item));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<ServerDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<ServerDto[]>(null as any);
  }

  addServer(
    serverForCreation: ServerManipulationDto,
    cancelToken?: CancelToken | undefined
  ): Promise<ServerDto> {
    let url_ = this.baseUrl + "/api/v1/servers";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(serverForCreation);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processAddServer(_response);
      });
  }

  protected processAddServer(response: AxiosResponse): Promise<ServerDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 201) {
      const _responseText = response.data;
      let result201: any = null;
      let resultData201 = _responseText;
      result201 = ServerDto.fromJS(resultData201);
      return Promise.resolve<ServerDto>(result201);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<ServerDto>(null as any);
  }

  getServersOfUser(
    cancelToken?: CancelToken | undefined
  ): Promise<ServerDto[]> {
    let url_ = this.baseUrl + "/api/v1/servers/api/me/servers";
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetServersOfUser(_response);
      });
  }

  protected processGetServersOfUser(
    response: AxiosResponse
  ): Promise<ServerDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(ServerDto.fromJS(item));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<ServerDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<ServerDto[]>(null as any);
  }

  getServerById(
    serverId: string,
    cancelToken?: CancelToken | undefined
  ): Promise<ServerDto> {
    let url_ = this.baseUrl + "/api/v1/servers/{serverId}";
    if (serverId === undefined || serverId === null)
      throw new Error("The parameter 'serverId' must be defined.");
    url_ = url_.replace("{serverId}", encodeURIComponent("" + serverId));
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetServerById(_response);
      });
  }

  protected processGetServerById(response: AxiosResponse): Promise<ServerDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ServerDto.fromJS(resultData200);
      return Promise.resolve<ServerDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<ServerDto>(null as any);
  }

  getChannels(
    serverId: string,
    cancelToken?: CancelToken | undefined
  ): Promise<ChannelDto[]> {
    let url_ = this.baseUrl + "/api/v1/servers/{serverId}/channels";
    if (serverId === undefined || serverId === null)
      throw new Error("The parameter 'serverId' must be defined.");
    url_ = url_.replace("{serverId}", encodeURIComponent("" + serverId));
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetChannels(_response);
      });
  }

  protected processGetChannels(response: AxiosResponse): Promise<ChannelDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(ChannelDto.fromJS(item));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<ChannelDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<ChannelDto[]>(null as any);
  }

  deleteServer(
    id: string,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/v1/servers/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "DELETE",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteServer(_response);
      });
  }

  protected processDeleteServer(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 204) {
      const _responseText = response.data;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(null as any);
  }

  updateServer(
    id: string,
    server: ServerManipulationDto,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/v1/servers/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(server);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: "PUT",
      url: url_,
      headers: {
        "Content-Type": "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdateServer(_response);
      });
  }

  protected processUpdateServer(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 204) {
      const _responseText = response.data;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(null as any);
  }

  joinServer(
    serverId: string,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/v1/servers/join/{serverId}";
    if (serverId === undefined || serverId === null)
      throw new Error("The parameter 'serverId' must be defined.");
    url_ = url_.replace("{serverId}", encodeURIComponent("" + serverId));
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "POST",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processJoinServer(_response);
      });
  }

  protected processJoinServer(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 204) {
      const _responseText = response.data;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(null as any);
  }

  leaveServer(
    serverId: string,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/v1/servers/leave/{serverId}";
    if (serverId === undefined || serverId === null)
      throw new Error("The parameter 'serverId' must be defined.");
    url_ = url_.replace("{serverId}", encodeURIComponent("" + serverId));
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "POST",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processLeaveServer(_response);
      });
  }

  protected processLeaveServer(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 204) {
      const _responseText = response.data;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(null as any);
  }
}

export interface IUserClient {
  getUsers(): Promise<UserDto[]>;
  /**
   * @deprecated
   */
  addUser(userForCreation: UserCreationDto): Promise<UserDto>;
  getUser(id: string): Promise<UserDto>;
  deleteUser(id: string): Promise<void>;
  updateUser(id: string, user: UserManipulationDto): Promise<void>;
}

export class UserClient implements IUserClient {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();

    this.baseUrl =
      baseUrl !== undefined && baseUrl !== null
        ? baseUrl
        : "ws://localhost:7045";
  }

  getUsers(cancelToken?: CancelToken | undefined): Promise<UserDto[]> {
    let url_ = this.baseUrl + "/api/v1/users";
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetUsers(_response);
      });
  }

  protected processGetUsers(response: AxiosResponse): Promise<UserDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200) result200!.push(UserDto.fromJS(item));
      } else {
        result200 = <any>null;
      }
      return Promise.resolve<UserDto[]>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<UserDto[]>(null as any);
  }

  /**
   * @deprecated
   */
  addUser(
    userForCreation: UserCreationDto,
    cancelToken?: CancelToken | undefined
  ): Promise<UserDto> {
    let url_ = this.baseUrl + "/api/v1/users";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(userForCreation);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processAddUser(_response);
      });
  }

  protected processAddUser(response: AxiosResponse): Promise<UserDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 201) {
      const _responseText = response.data;
      let result201: any = null;
      let resultData201 = _responseText;
      result201 = UserDto.fromJS(resultData201);
      return Promise.resolve<UserDto>(result201);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<UserDto>(null as any);
  }

  getUser(id: string, cancelToken?: CancelToken | undefined): Promise<UserDto> {
    let url_ = this.baseUrl + "/api/v1/users/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetUser(_response);
      });
  }

  protected processGetUser(response: AxiosResponse): Promise<UserDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = UserDto.fromJS(resultData200);
      return Promise.resolve<UserDto>(result200);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<UserDto>(null as any);
  }

  deleteUser(id: string, cancelToken?: CancelToken | undefined): Promise<void> {
    let url_ = this.baseUrl + "/api/v1/users/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "DELETE",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDeleteUser(_response);
      });
  }

  protected processDeleteUser(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 204) {
      const _responseText = response.data;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(null as any);
  }

  updateUser(
    id: string,
    user: UserManipulationDto,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/v1/users/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(user);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: "PUT",
      url: url_,
      headers: {
        "Content-Type": "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdateUser(_response);
      });
  }

  protected processUpdateUser(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 204) {
      const _responseText = response.data;
      return Promise.resolve<void>(null as any);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(null as any);
  }
}

export class WeatherForecast implements IWeatherForecast {
  date?: Date;
  temperatureC?: number;
  temperatureF?: number;
  summary?: string | undefined;

  constructor(data?: IWeatherForecast) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.date = _data["date"]
        ? new Date(_data["date"].toString())
        : <any>undefined;
      this.temperatureC = _data["temperatureC"];
      this.temperatureF = _data["temperatureF"];
      this.summary = _data["summary"];
    }
  }

  static fromJS(data: any): WeatherForecast {
    data = typeof data === "object" ? data : {};
    let result = new WeatherForecast();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["date"] = this.date ? this.date.toISOString() : <any>undefined;
    data["temperatureC"] = this.temperatureC;
    data["temperatureF"] = this.temperatureF;
    data["summary"] = this.summary;
    return data;
  }
}

export interface IWeatherForecast {
  date?: Date;
  temperatureC?: number;
  temperatureF?: number;
  summary?: string | undefined;
}

export class ChannelMessageDto implements IChannelMessageDto {
  id?: string;
  createdOn?: Date;
  createdBy?: string | undefined;
  isEdit?: boolean;
  lastModifiedOn?: Date | undefined;
  content?: string | undefined;
  author?: User;
  channelId?: string;
  serverId?: string | undefined;

  constructor(data?: IChannelMessageDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.createdOn = _data["createdOn"]
        ? new Date(_data["createdOn"].toString())
        : <any>undefined;
      this.createdBy = _data["createdBy"];
      this.isEdit = _data["isEdit"];
      this.lastModifiedOn = _data["lastModifiedOn"]
        ? new Date(_data["lastModifiedOn"].toString())
        : <any>undefined;
      this.content = _data["content"];
      this.author = _data["author"]
        ? User.fromJS(_data["author"])
        : <any>undefined;
      this.channelId = _data["channelId"];
      this.serverId = _data["serverId"];
    }
  }

  static fromJS(data: any): ChannelMessageDto {
    data = typeof data === "object" ? data : {};
    let result = new ChannelMessageDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id;
    data["createdOn"] = this.createdOn
      ? this.createdOn.toISOString()
      : <any>undefined;
    data["createdBy"] = this.createdBy;
    data["isEdit"] = this.isEdit;
    data["lastModifiedOn"] = this.lastModifiedOn
      ? this.lastModifiedOn.toISOString()
      : <any>undefined;
    data["content"] = this.content;
    data["author"] = this.author ? this.author.toJSON() : <any>undefined;
    data["channelId"] = this.channelId;
    data["serverId"] = this.serverId;
    return data;
  }
}

export interface IChannelMessageDto {
  id?: string;
  createdOn?: Date;
  createdBy?: string | undefined;
  isEdit?: boolean;
  lastModifiedOn?: Date | undefined;
  content?: string | undefined;
  author?: User;
  channelId?: string;
  serverId?: string | undefined;
}

export class User implements IUser {
  id?: string;
  username?: string | undefined;
  isOnline?: boolean | undefined;
  bot?: boolean | undefined;
  system?: boolean | undefined;
  accentColor?: boolean | undefined;
  servers?: Server[];

  constructor(data?: IUser) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.username = _data["username"];
      this.isOnline = _data["isOnline"];
      this.bot = _data["bot"];
      this.system = _data["system"];
      this.accentColor = _data["accentColor"];
      if (Array.isArray(_data["servers"])) {
        this.servers = [] as any;
        for (let item of _data["servers"])
          this.servers!.push(Server.fromJS(item));
      }
    }
  }

  static fromJS(data: any): User {
    data = typeof data === "object" ? data : {};
    let result = new User();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id;
    data["username"] = this.username;
    data["isOnline"] = this.isOnline;
    data["bot"] = this.bot;
    data["system"] = this.system;
    data["accentColor"] = this.accentColor;
    if (Array.isArray(this.servers)) {
      data["servers"] = [];
      for (let item of this.servers) data["servers"].push(item.toJSON());
    }
    return data;
  }
}

export interface IUser {
  id?: string;
  username?: string | undefined;
  isOnline?: boolean | undefined;
  bot?: boolean | undefined;
  system?: boolean | undefined;
  accentColor?: boolean | undefined;
  servers?: Server[];
}

export class Server implements IServer {
  id?: string;
  name?: string;
  iconUrl?: string | undefined;
  ownerUserId?: string;
  channels?: Channel[] | undefined;
  members?: User[] | undefined;

  constructor(data?: IServer) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.iconUrl = _data["iconUrl"];
      this.ownerUserId = _data["ownerUserId"];
      if (Array.isArray(_data["channels"])) {
        this.channels = [] as any;
        for (let item of _data["channels"])
          this.channels!.push(Channel.fromJS(item));
      }
      if (Array.isArray(_data["members"])) {
        this.members = [] as any;
        for (let item of _data["members"])
          this.members!.push(User.fromJS(item));
      }
    }
  }

  static fromJS(data: any): Server {
    data = typeof data === "object" ? data : {};
    let result = new Server();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["iconUrl"] = this.iconUrl;
    data["ownerUserId"] = this.ownerUserId;
    if (Array.isArray(this.channels)) {
      data["channels"] = [];
      for (let item of this.channels) data["channels"].push(item.toJSON());
    }
    if (Array.isArray(this.members)) {
      data["members"] = [];
      for (let item of this.members) data["members"].push(item.toJSON());
    }
    return data;
  }
}

export interface IServer {
  id?: string;
  name?: string;
  iconUrl?: string | undefined;
  ownerUserId?: string;
  channels?: Channel[] | undefined;
  members?: User[] | undefined;
}

export class Channel implements IChannel {
  id?: string;
  type?: number;
  name?: string | undefined;
  topic?: string | undefined;
  serverId?: string | undefined;
  server?: Server | undefined;
  messages?: ChannelMessage[] | undefined;
  recipients?: User[] | undefined;

  constructor(data?: IChannel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.type = _data["type"];
      this.name = _data["name"];
      this.topic = _data["topic"];
      this.serverId = _data["serverId"];
      this.server = _data["server"]
        ? Server.fromJS(_data["server"])
        : <any>undefined;
      if (Array.isArray(_data["messages"])) {
        this.messages = [] as any;
        for (let item of _data["messages"])
          this.messages!.push(ChannelMessage.fromJS(item));
      }
      if (Array.isArray(_data["recipients"])) {
        this.recipients = [] as any;
        for (let item of _data["recipients"])
          this.recipients!.push(User.fromJS(item));
      }
    }
  }

  static fromJS(data: any): Channel {
    data = typeof data === "object" ? data : {};
    let result = new Channel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id;
    data["type"] = this.type;
    data["name"] = this.name;
    data["topic"] = this.topic;
    data["serverId"] = this.serverId;
    data["server"] = this.server ? this.server.toJSON() : <any>undefined;
    if (Array.isArray(this.messages)) {
      data["messages"] = [];
      for (let item of this.messages) data["messages"].push(item.toJSON());
    }
    if (Array.isArray(this.recipients)) {
      data["recipients"] = [];
      for (let item of this.recipients) data["recipients"].push(item.toJSON());
    }
    return data;
  }
}

export interface IChannel {
  id?: string;
  type?: number;
  name?: string | undefined;
  topic?: string | undefined;
  serverId?: string | undefined;
  server?: Server | undefined;
  messages?: ChannelMessage[] | undefined;
  recipients?: User[] | undefined;
}

export class ChannelMessage implements IChannelMessage {
  id?: string;
  content?: string | undefined;
  createdBy?: string | undefined;
  createdOn?: Date;
  isEdit?: boolean;
  lastModifiedOn?: Date | undefined;
  channelId?: string;
  channel?: Channel;
  serverId?: string | undefined;
  server?: Server | undefined;
  authorId?: string | undefined;
  author?: User | undefined;

  constructor(data?: IChannelMessage) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.content = _data["content"];
      this.createdBy = _data["createdBy"];
      this.createdOn = _data["createdOn"]
        ? new Date(_data["createdOn"].toString())
        : <any>undefined;
      this.isEdit = _data["isEdit"];
      this.lastModifiedOn = _data["lastModifiedOn"]
        ? new Date(_data["lastModifiedOn"].toString())
        : <any>undefined;
      this.channelId = _data["channelId"];
      this.channel = _data["channel"]
        ? Channel.fromJS(_data["channel"])
        : <any>undefined;
      this.serverId = _data["serverId"];
      this.server = _data["server"]
        ? Server.fromJS(_data["server"])
        : <any>undefined;
      this.authorId = _data["authorId"];
      this.author = _data["author"]
        ? User.fromJS(_data["author"])
        : <any>undefined;
    }
  }

  static fromJS(data: any): ChannelMessage {
    data = typeof data === "object" ? data : {};
    let result = new ChannelMessage();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id;
    data["content"] = this.content;
    data["createdBy"] = this.createdBy;
    data["createdOn"] = this.createdOn
      ? this.createdOn.toISOString()
      : <any>undefined;
    data["isEdit"] = this.isEdit;
    data["lastModifiedOn"] = this.lastModifiedOn
      ? this.lastModifiedOn.toISOString()
      : <any>undefined;
    data["channelId"] = this.channelId;
    data["channel"] = this.channel ? this.channel.toJSON() : <any>undefined;
    data["serverId"] = this.serverId;
    data["server"] = this.server ? this.server.toJSON() : <any>undefined;
    data["authorId"] = this.authorId;
    data["author"] = this.author ? this.author.toJSON() : <any>undefined;
    return data;
  }
}

export interface IChannelMessage {
  id?: string;
  content?: string | undefined;
  createdBy?: string | undefined;
  createdOn?: Date;
  isEdit?: boolean;
  lastModifiedOn?: Date | undefined;
  channelId?: string;
  channel?: Channel;
  serverId?: string | undefined;
  server?: Server | undefined;
  authorId?: string | undefined;
  author?: User | undefined;
}

export class ChannelDto implements IChannelDto {
  id?: string;
  type?: number;
  name?: string | undefined;
  topic?: string | undefined;
  serverId?: string | undefined;
  recipients?: User[] | undefined;

  constructor(data?: IChannelDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.type = _data["type"];
      this.name = _data["name"];
      this.topic = _data["topic"];
      this.serverId = _data["serverId"];
      if (Array.isArray(_data["recipients"])) {
        this.recipients = [] as any;
        for (let item of _data["recipients"])
          this.recipients!.push(User.fromJS(item));
      }
    }
  }

  static fromJS(data: any): ChannelDto {
    data = typeof data === "object" ? data : {};
    let result = new ChannelDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id;
    data["type"] = this.type;
    data["name"] = this.name;
    data["topic"] = this.topic;
    data["serverId"] = this.serverId;
    if (Array.isArray(this.recipients)) {
      data["recipients"] = [];
      for (let item of this.recipients) data["recipients"].push(item.toJSON());
    }
    return data;
  }
}

export interface IChannelDto {
  id?: string;
  type?: number;
  name?: string | undefined;
  topic?: string | undefined;
  serverId?: string | undefined;
  recipients?: User[] | undefined;
}

export class ChannelManipulationDto implements IChannelManipulationDto {
  name?: string | undefined;
  type?: number | undefined;
  topic?: string | undefined;
  serverId?: string | undefined;

  constructor(data?: IChannelManipulationDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data["name"];
      this.type = _data["type"];
      this.topic = _data["topic"];
      this.serverId = _data["serverId"];
    }
  }

  static fromJS(data: any): ChannelManipulationDto {
    data = typeof data === "object" ? data : {};
    let result = new ChannelManipulationDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["name"] = this.name;
    data["type"] = this.type;
    data["topic"] = this.topic;
    data["serverId"] = this.serverId;
    return data;
  }
}

export interface IChannelManipulationDto {
  name?: string | undefined;
  type?: number | undefined;
  topic?: string | undefined;
  serverId?: string | undefined;
}

export class MessageManipulationDto implements IMessageManipulationDto {
  content?: string | undefined;
  channelId?: string;

  constructor(data?: IMessageManipulationDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.content = _data["content"];
      this.channelId = _data["channelId"];
    }
  }

  static fromJS(data: any): MessageManipulationDto {
    data = typeof data === "object" ? data : {};
    let result = new MessageManipulationDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["content"] = this.content;
    data["channelId"] = this.channelId;
    return data;
  }
}

export interface IMessageManipulationDto {
  content?: string | undefined;
  channelId?: string;
}

export class ServerDto implements IServerDto {
  id?: string;
  name?: string | undefined;
  topic?: string | undefined;
  ownerUserId?: string;
  channels?: Channel[] | undefined;
  members?: User[] | undefined;

  constructor(data?: IServerDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.topic = _data["topic"];
      this.ownerUserId = _data["ownerUserId"];
      if (Array.isArray(_data["channels"])) {
        this.channels = [] as any;
        for (let item of _data["channels"])
          this.channels!.push(Channel.fromJS(item));
      }
      if (Array.isArray(_data["members"])) {
        this.members = [] as any;
        for (let item of _data["members"])
          this.members!.push(User.fromJS(item));
      }
    }
  }

  static fromJS(data: any): ServerDto {
    data = typeof data === "object" ? data : {};
    let result = new ServerDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["topic"] = this.topic;
    data["ownerUserId"] = this.ownerUserId;
    if (Array.isArray(this.channels)) {
      data["channels"] = [];
      for (let item of this.channels) data["channels"].push(item.toJSON());
    }
    if (Array.isArray(this.members)) {
      data["members"] = [];
      for (let item of this.members) data["members"].push(item.toJSON());
    }
    return data;
  }
}

export interface IServerDto {
  id?: string;
  name?: string | undefined;
  topic?: string | undefined;
  ownerUserId?: string;
  channels?: Channel[] | undefined;
  members?: User[] | undefined;
}

export class ServerManipulationDto implements IServerManipulationDto {
  name?: string | undefined;

  constructor(data?: IServerManipulationDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data["name"];
    }
  }

  static fromJS(data: any): ServerManipulationDto {
    data = typeof data === "object" ? data : {};
    let result = new ServerManipulationDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["name"] = this.name;
    return data;
  }
}

export interface IServerManipulationDto {
  name?: string | undefined;
}

export class UserDto implements IUserDto {
  id?: string;
  name?: string | undefined;
  isOnline?: boolean | undefined;

  constructor(data?: IUserDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.isOnline = _data["isOnline"];
    }
  }

  static fromJS(data: any): UserDto {
    data = typeof data === "object" ? data : {};
    let result = new UserDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["isOnline"] = this.isOnline;
    return data;
  }
}

export interface IUserDto {
  id?: string;
  name?: string | undefined;
  isOnline?: boolean | undefined;
}

export class UserCreationDto implements IUserCreationDto {
  name?: string | undefined;
  isOnline?: boolean | undefined;

  constructor(data?: IUserCreationDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data["name"];
      this.isOnline = _data["isOnline"];
    }
  }

  static fromJS(data: any): UserCreationDto {
    data = typeof data === "object" ? data : {};
    let result = new UserCreationDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["name"] = this.name;
    data["isOnline"] = this.isOnline;
    return data;
  }
}

export interface IUserCreationDto {
  name?: string | undefined;
  isOnline?: boolean | undefined;
}

export class UserManipulationDto implements IUserManipulationDto {
  isOnline?: boolean | undefined;

  constructor(data?: IUserManipulationDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.isOnline = _data["isOnline"];
    }
  }

  static fromJS(data: any): UserManipulationDto {
    data = typeof data === "object" ? data : {};
    let result = new UserManipulationDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["isOnline"] = this.isOnline;
    return data;
  }
}

export interface IUserManipulationDto {
  isOnline?: boolean | undefined;
}

export class SwaggerException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isSwaggerException = true;

  static isSwaggerException(obj: any): obj is SwaggerException {
    return obj.isSwaggerException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): any {
  if (result !== null && result !== undefined) throw result;
  else throw new SwaggerException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
  return obj && obj.isAxiosError === true;
}
